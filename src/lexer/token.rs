/// Holds a [u8] slice. This wrapper ensures it is Debug printed as an ASCII
/// string (which is close enough for CodePage 850).
#[derive(PartialEq, Clone)]
pub struct ByteString<'a>(pub &'a [u8]);

/// These tokens include keywords, operators, indentifiers (such as `X`, and
/// `X$`) and built-in functions.
#[derive(PartialEq, Clone, Debug)]
pub enum Token<'a> {
    Abs,
    Acs,
    As,
    Asc,
    Asn,
    Assign,
    Atn,
    Beep,
    BGetHash,
    BoolLiteral(bool),
    BPutHash,
    Break,
    By,
    Call,
    Caret,
    Case,
    ChrDollar,
    Circle,
    Clear,
    Clg,
    Close,
    Cls,
    Colon,
    Colour,
    Comma,
    Cos,
    Count,
    Data,
    DecimalFloatLiteral(f64),
    DecimalIntLiteral(i64),
    Def,
    Deg,
    Dim,
    Div,
    Draw,
    Ellipse,
    Else,
    ElseIf,
    End,
    EndCase,
    EndIf,
    EndProc,
    EndWhile,
    EOF,
    EofHash,
    Eor,
    Erl,
    Error,
    Exp,
    Ext,
    Fill,
    For,
    GCol,
    Get,
    GetDollar,
    GetHash,
    Gosub,
    Goto,
    GreaterThan,
    GreaterThanEqual,
    HexIntLiteral(i64),
    Identifier(ByteString<'a>),
    If,
    InKey,
    InkeyDollar,
    Input,
    InputHash,
    InStr,
    Int,
    Integer,
    IntegerIdentifier(ByteString<'a>),
    LeftDollar,
    LeftRoundBracket,
    Len,
    LessThan,
    LessThanEqual,
    Let,
    Line,
    List,
    Ln,
    Load,
    Local,
    Log,
    MidDollar,
    Minus,
    Mod,
    Mode,
    Move,
    New,
    NewLine,
    Next,
    Not,
    NotEqual,
    Of,
    Off,
    On,
    Open,
    Or,
    Origin,
    Otherwise,
    Plus,
    Point,
    Poke,
    Pos,
    Print,
    PrintHash,
    Private,
    Proc,
    Quit,
    Rad,
    Read,
    Rectangle,
    Rem,
    Repeat,
    Restore,
    Return,
    RightDollar,
    RightRoundBracket,
    Rnd,
    Run,
    Save,
    SemiColon,
    Sgn,
    Sin,
    Slash,
    Sound,
    Spc,
    Sqr,
    Star,
    Step,
    Stop,
    StrDollar,
    StringDollar,
    StringIdentifier(ByteString<'a>),
    StringLiteral(ByteString<'a>),
    Stroke,
    Sum,
    Swap,
    Swi,
    Sys,
    Tab,
    Tan,
    Then,
    Time,
    Tint,
    To,
    Trace,
    Until,
    Usr,
    Val,
    Verify,
    VPos,
    Wait,
    While,
    Width,
}

impl<'a> ::core::fmt::Debug for ByteString<'a> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use super::display_ascii_string;
        display_ascii_string(self.0, fmt)
    }
}

// End of file
